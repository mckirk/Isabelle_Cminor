diff --git a/Makefile.extr b/Makefile.extr
index b417945b..4c196d49 100644
--- a/Makefile.extr
+++ b/Makefile.extr
@@ -56,7 +56,7 @@ extraction/%.cmo: WARNINGS +=-w -20-27-32..34-39-41-44..45-60-67
 cparser/pre_parser.cmx: WARNINGS += -w -41
 cparser/pre_parser.cmo: WARNINGS += -w -41
 
-COMPFLAGS+=-g $(INCLUDES) -I "$(MENHIR_DIR)" $(WARNINGS)
+COMPFLAGS+=-g $(INCLUDES) -I "$(MENHIR_DIR)" -I "$(YOJSON_DIR)" -I "$(EASYFORMAT_DIR)" -I "$(BINIOU_DIR)" $(WARNINGS)
 
 # Using .opt compilers if available
 
@@ -78,7 +78,7 @@ PARSERS=cparser/pre_parser.mly
 LEXERS=cparser/Lexer.mll lib/Tokenize.mll \
 	     lib/Readconfig.mll lib/Responsefile.mll
 
-LIBS=str.cmxa unix.cmxa $(MENHIR_LIBS)
+LIBS=str.cmxa unix.cmxa $(MENHIR_LIBS) easy_format.cmxa biniou.cmxa yojson.cmxa
 LIBS_BYTE=$(patsubst %.cmxa,%.cma,$(patsubst %.cmx,%.cmo,$(LIBS)))
 
 EXECUTABLES=ccomp ccomp.byte cchecklink cchecklink.byte clightgen clightgen.byte
diff --git a/configure b/configure
index fcdbe803..c6480a85 100755
--- a/configure
+++ b/configure
@@ -610,6 +610,18 @@ case "$menhir_ver" in
         missingtools=true;;
 esac
 
+echo "Finding Yojson..." | tr -d '\n'
+yojson_dir=$(ocamlfind query yojson 2>/dev/null) || \
+yojson_dir=""
+
+echo "Finding Easy_Format..." | tr -d '\n'
+easyformat_dir=$(ocamlfind query easy-format 2>/dev/null) || \
+easyformat_dir=""
+
+echo "Finding Biniou..." | tr -d '\n'
+biniou_dir=$(ocamlfind query biniou 2>/dev/null) || \
+biniou_dir=""
+
 echo "Testing GNU make... " | tr -d '\n'
 make=''
 for mk in make gmake gnumake; do
@@ -648,6 +660,9 @@ COQDEVDIR=$coqdevdir
 OCAML_NATIVE_COMP=$ocaml_native_comp
 OCAML_OPT_COMP=$ocaml_opt_comp
 MENHIR_DIR=$menhir_dir
+YOJSON_DIR=$yojson_dir
+EASYFORMAT_DIR=$easyformat_dir
+BINIOU_DIR=$biniou_dir
 COMPFLAGS=-bin-annot
 EOF
 
@@ -842,6 +857,9 @@ CompCert configuration:
     Math library.................. $libmath
     Build command to use.......... $make
     Menhir API library............ $menhir_dir
+    Yojson API library............ $yojson_dir
+    Easy_format API library....... $easyformat_dir
+    Biniou API library............ $biniou_dir
     The Flocq library............. $library_Flocq
     The MenhirLib library......... $library_MenhirLib
     Binaries installed in......... $bindirexp
diff --git a/driver/Driver.ml b/driver/Driver.ml
index 66cfeaa7..618bcd9c 100644
--- a/driver/Driver.ml
+++ b/driver/Driver.ml
@@ -21,6 +21,9 @@ open Assembler
 open Linker
 open Diagnostics
 
+open AST
+open SplitLong
+
 (* Name used for version string etc. *)
 let tool_name = "C verified compiler"
 
@@ -71,6 +74,66 @@ let compile_c_file sourcename ifile ofile =
   PrintAsm.print_program oc asm;
   close_out oc
 
+let explode s = List.init (String.length s) (String.get s)
+let add_external_func name sg prog =
+  (* let (last_id, _) = List.hd prog.prog_defs in *)
+  let atom = Camlcoq.intern_string name in
+  {prog with prog_defs = (atom, AST.Gfun (AST.External (AST.EF_runtime (explode name,  sg)))) :: prog.prog_defs}
+
+let add_external_funcs prog =
+  prog
+  |> add_external_func "__compcert_i64_dtos" sig_f_l
+  |> add_external_func "__compcert_i64_dtou" sig_f_l
+  |> add_external_func "__compcert_i64_stod" sig_l_f
+  |> add_external_func "__compcert_i64_utod" sig_l_f
+  |> add_external_func "__compcert_i64_stof" sig_l_s
+  |> add_external_func "__compcert_i64_utof" sig_l_s
+  |> add_external_func "__compcert_i64_sdiv" sig_ll_l
+  |> add_external_func "__compcert_i64_udiv" sig_ll_l
+  |> add_external_func "__compcert_i64_smod" sig_ll_l
+  |> add_external_func "__compcert_i64_umod" sig_ll_l
+  |> add_external_func "__compcert_i64_shl" sig_li_l
+  |> add_external_func "__compcert_i64_shr" sig_li_l
+  |> add_external_func "__compcert_i64_sar" sig_li_l
+  |> add_external_func "__compcert_i64_umulh" sig_ll_l
+  |> add_external_func "__compcert_i64_smulh" sig_ll_l
+
+let parse_cminor_file sourcename =
+  let json = Yojson.Safe.from_file sourcename in
+  Serialize.parse_program json
+
+let compile_cminor_file sourcename ofile =
+  (* Prepare to dump Clight, RTL, etc, if requested *)
+
+  let set_dest dst opt ext =
+    dst := if !opt then Some (output_filename sourcename ".cmj" ext)
+      else None in
+  set_dest PrintCminor.destination option_dcminor ".cm";
+  set_dest PrintRTL.destination option_drtl ".rtl";
+  set_dest Regalloc.destination_alloctrace option_dalloctrace ".alloctrace";
+  set_dest PrintLTL.destination option_dltl ".ltl";
+  set_dest PrintMach.destination option_dmach ".mach";
+  set_dest AsmToJSON.destination option_sdump !sdump_suffix;
+  (* Parse the JSON *)
+  let cminor = parse_cminor_file sourcename in
+  let fixed = add_external_funcs cminor in
+  (* Convert to Asm *)
+  let asm =
+    match Compiler.apply_partial
+                (Compiler.transf_cminor_program fixed)
+                Asmexpand.expand_program with
+    | Errors.OK asm ->
+        asm
+    | Errors.Error msg ->
+      let loc = file_loc sourcename in
+        fatal_error loc "%a"  print_error msg in
+  (* Dump Asm in binary and JSON format *)
+  AsmToJSON.print_if asm sourcename;
+  (* Print Asm in text form *)
+  let oc = open_out ofile in
+  PrintAsm.print_program oc asm;
+  close_out oc
+
 (* From C source to asm *)
 
 let compile_i_file sourcename preproname =
@@ -110,6 +173,24 @@ let process_c_file sourcename =
     compile_i_file sourcename preproname
   end
 
+(* Processing of a .cmj file *)
+
+let process_cminor_file sourcename =
+  ensure_inputfile_exists sourcename;
+  if !option_S then begin
+    compile_cminor_file sourcename (output_filename ~final:true sourcename ".cmj" ".s");
+    ""
+  end else begin
+    let asmname =
+      if !option_dasm
+      then output_filename sourcename ".cmj" ".s"
+      else tmp_file ".s" in
+    compile_cminor_file sourcename asmname;
+    let objname = object_filename sourcename ".cmj" in
+    assemble asmname objname;
+    objname
+  end
+
 (* Processing of a .i / .p file (preprocessed C) *)
 
 let process_i_file sourcename =
@@ -168,6 +249,7 @@ let usage_string =
   {|Usage: ccomp [options] <source files>
 Recognized source files:
   .c             C source file
+  .cmj           Cminor AST in JSON format
   .i or .p       C source file that should not be preprocessed
   .s             Assembly file
   .S or .sx      Assembly file that must be preprocessed
@@ -376,6 +458,8 @@ let cmdline_actions =
 (* File arguments *)
   Suffix ".c", Self (fun s ->
       push_action process_c_file s; incr num_source_files; incr num_input_files);
+  Suffix ".cmj", Self (fun s ->
+      push_action process_cminor_file s; incr num_source_files; incr num_input_files);
   Suffix ".i", Self (fun s ->
       push_action process_i_file s; incr num_source_files; incr num_input_files);
   Suffix ".p", Self (fun s ->
diff --git a/driver/Serialize.ml b/driver/Serialize.ml
new file mode 100644
index 00000000..50b117b4
--- /dev/null
+++ b/driver/Serialize.ml
@@ -0,0 +1,316 @@
+type json = Yojson.Safe.t
+
+(* Util *)
+open BinNums
+open Camlcoq
+
+let fail_parse n j = failwith ("Can't parse " ^ n ^ " from " ^ Yojson.Safe.show j)
+let explode s = List.init (String.length s) (String.get s)
+
+let string_to_Z (s : string) : coq_Z =
+  let i64 = Int64.of_string s in
+  Z.of_sint64 i64
+
+let string_to_positive (s : string) : positive =
+  let i64 = Int64.of_string s in
+  P.of_int64 i64
+
+(* JSON combinators *)
+
+let parse_tuple2 (f1 : json -> 'a) (f2 : json -> 'b) j : ('a * 'b) =
+  match j with (`List (j1 :: j2 :: [])) -> (f1 j1, f2 j2) | _ -> fail_parse "tuple2" j
+let parse_tuple3 f1 f2 f3 j =
+  match j with (`List (j1 :: j2 :: j3 :: [])) -> (f1 j1, f2 j2, f3 j3) | _ -> fail_parse "tuple3" j
+let parse_tuple4 f1 f2 f3 f4 j =
+  match j with (`List (j1 :: j2 :: j3 :: j4 :: [])) -> (f1 j1, f2 j2, f3 j3, f4 j4) | _ -> fail_parse "tuple4" j
+
+let parse_list (f: json -> 'b) (j: json) : 'b list =
+  match j with (`List l) -> List.map f l  | _ -> fail_parse "list" j
+
+let parse_assoc_key (k: string) (f: json -> 'b)  (j: json) : 'b =
+  match j with (`Assoc al) -> f (List.assoc k al)  | _ -> fail_parse ("assoc key " ^ k) j
+
+let parse_option (f: json -> 'b) j : 'b option =
+  match j with (`Null) -> None | `List (j2 :: []) -> Some (f j2) | _ -> fail_parse "option" j
+
+(* Ocaml types *)
+let parse_unit j =
+  match j with (`Null) -> () | _ -> fail_parse "unit" j
+
+let parse_bool j : bool =
+  match j with (`Bool b) -> b | _ -> fail_parse "bool" j
+
+let parse_string j =
+  match j with (`String s) -> explode s | _ -> fail_parse "string" j
+
+
+(* Base types *)
+open AST
+open Cminor
+open Integers
+
+let parse_positive j : BinNums.positive =
+  match j with (`Int i) -> P.of_int i  | _ -> fail_parse "positive" j
+
+let parse_ident_str j : ident =
+  match j with (`String s) -> intern_string s | _ -> fail_parse "ident_str" j
+
+let parse_coq_Z j =
+  match j with (`Int i) -> Z.of_sint i  | `Intlit s -> string_to_Z s | _ -> fail_parse "coq_Z" j
+let parse_nat j =
+  match j with (`Int i) -> Nat.of_int i  | _ -> fail_parse "nat" j
+
+module type Wordmod = sig
+  val wordsize : Datatypes.nat
+  type int = coq_Z
+  val repr : coq_Z -> int
+end
+
+let parse_word (module M : Wordmod) j =
+  match j with `Int i -> M.repr (Z.of_sint i) | `Intlit s -> M.repr (string_to_Z s) | _ -> fail_parse ("word" ^ Z.to_string (BinInt.Z.of_nat M.wordsize)) j
+
+
+let parse_Int_int = parse_word (module Integers.Int)
+let parse_Int64_int = parse_word (module Integers.Int64)
+let parse_Ptrofs_int = parse_word (module Integers.Ptrofs)
+let parse_float32 j = fail_parse "float32" j
+let parse_float j = fail_parse "float" j
+
+(* Generated *)
+
+let parse_comparison (j : json) : comparison =
+  match j with
+  | `String "Ceq" -> Ceq
+  | `String "Cne" -> Cne
+  | `String "Clt" -> Clt
+  | `String "Cle" -> Cle
+  | `String "Cgt" -> Cgt
+  | `String "Cge" -> Cge
+  | _ -> fail_parse "comparison" j
+
+let parse_typ (j : json) : typ =
+  match j with
+  | `String "Tint" -> Tint
+  | `String "Tfloat" -> Tfloat
+  | `String "Tlong" -> Tlong
+  | `String "Tsingle" -> Tsingle
+  | `String "Tany32" -> Tany32
+  | `String "Tany64" -> Tany64
+  | _ -> fail_parse "typ" j
+
+let parse_rettype (j : json) : rettype =
+  match j with
+  | `List ((`String "Tret") :: a0 :: []) -> Tret (parse_typ a0)
+  | `List ((`String "Tint8signed") :: []) -> Tint8signed
+  | `List ((`String "Tint8unsigned") :: []) -> Tint8unsigned
+  | `List ((`String "Tint16signed") :: []) -> Tint16signed
+  | `List ((`String "Tint16unsigned") :: []) -> Tint16unsigned
+  | `List ((`String "Tvoid") :: []) -> Tvoid
+  | _ -> fail_parse "rettype" j
+
+let parse_calling_convention (j : json) : calling_convention =
+  {cc_vararg = parse_assoc_key "cc_vararg" parse_bool j;
+   cc_unproto = parse_assoc_key "cc_unproto" parse_bool j;
+   cc_structret = parse_assoc_key "cc_structret" parse_bool j}
+
+let parse_signature (j : json) : signature =
+  {sig_args = parse_assoc_key "sig_args" (parse_list parse_typ) j;
+   sig_res = parse_assoc_key "sig_res" parse_rettype j;
+   sig_cc = parse_assoc_key "sig_cc" parse_calling_convention j}
+
+let parse_memory_chunk (j : json) : memory_chunk =
+  match j with
+  | `String "Mint8signed" -> Mint8signed
+  | `String "Mint8unsigned" -> Mint8unsigned
+  | `String "Mint16signed" -> Mint16signed
+  | `String "Mint16unsigned" -> Mint16unsigned
+  | `String "Mint32" -> Mint32
+  | `String "Mint64" -> Mint64
+  | `String "Mfloat32" -> Mfloat32
+  | `String "Mfloat64" -> Mfloat64
+  | `String "Many32" -> Many32
+  | `String "Many64" -> Many64
+  | _ -> fail_parse "memory_chunk" j
+
+let parse_init_data (j : json) : init_data =
+  match j with
+  | `List ((`String "Init_int8") :: a0 :: []) -> Init_int8 (parse_Int_int a0)
+  | `List ((`String "Init_int16") :: a0 :: []) -> Init_int16 (parse_Int_int a0)
+  | `List ((`String "Init_int32") :: a0 :: []) -> Init_int32 (parse_Int_int a0)
+  | `List ((`String "Init_int64") :: a0 :: []) -> Init_int64 (parse_Int64_int a0)
+  | `List ((`String "Init_float32") :: a0 :: []) -> Init_float32 (parse_float32 a0)
+  | `List ((`String "Init_float64") :: a0 :: []) -> Init_float64 (parse_float a0)
+  | `List ((`String "Init_space") :: a0 :: []) -> Init_space (parse_coq_Z a0)
+  | `List ((`String "Init_addrof") :: a0 :: a1 :: []) -> Init_addrof (parse_ident_str a0, parse_Ptrofs_int a1)
+  | _ -> fail_parse "init_data" j
+
+let parse_globvar (parse_v : json -> 'v) (j : json) : 'v globvar =
+  {gvar_info = parse_assoc_key "gvar_info" parse_v j;
+   gvar_init = parse_assoc_key "gvar_init" (parse_list parse_init_data) j;
+   gvar_readonly = parse_assoc_key "gvar_readonly" parse_bool j;
+   gvar_volatile = parse_assoc_key "gvar_volatile" parse_bool j}
+
+let parse_globdef (parse_f : json -> 'f) (parse_v : json -> 'v) (j : json) : ('f, 'v) globdef =
+  match j with
+  | `List ((`String "Gfun") :: a0 :: []) -> Gfun (parse_f a0)
+  | `List ((`String "Gvar") :: a0 :: []) -> Gvar (parse_globvar parse_v a0)
+  | _ -> fail_parse "globdef" j
+
+let parse_AST_program (parse_f : json -> 'f) (parse_v : json -> 'v) (j : json) : ('f, 'v) AST.program =
+  {prog_defs = parse_assoc_key "prog_defs" (parse_list (parse_tuple2 parse_ident_str (parse_globdef parse_f parse_v))) j;
+   prog_public = parse_assoc_key "prog_public" (parse_list parse_ident_str) j;
+   prog_main = parse_assoc_key "prog_main" parse_ident_str j}
+
+let parse_external_function (j : json) : external_function =
+  match j with
+  | `List ((`String "EF_external") :: a0 :: a1 :: []) -> EF_external (parse_string a0, parse_signature a1)
+  | `List ((`String "EF_builtin") :: a0 :: a1 :: []) -> EF_builtin (parse_string a0, parse_signature a1)
+  | `List ((`String "EF_runtime") :: a0 :: a1 :: []) -> EF_runtime (parse_string a0, parse_signature a1)
+  | `List ((`String "EF_vload") :: a0 :: []) -> EF_vload (parse_memory_chunk a0)
+  | `List ((`String "EF_vstore") :: a0 :: []) -> EF_vstore (parse_memory_chunk a0)
+  | `List ((`String "EF_malloc") :: []) -> EF_malloc
+  | `List ((`String "EF_free") :: []) -> EF_free
+  | `List ((`String "EF_memcpy") :: a0 :: a1 :: []) -> EF_memcpy (parse_coq_Z a0, parse_coq_Z a1)
+  | `List ((`String "EF_annot") :: a0 :: a1 :: a2 :: []) -> EF_annot (parse_positive a0, parse_string a1, parse_list parse_typ a2)
+  | `List ((`String "EF_annot_val") :: a0 :: a1 :: a2 :: []) -> EF_annot_val (parse_positive a0, parse_string a1, parse_typ a2)
+  | `List ((`String "EF_inline_asm") :: a0 :: a1 :: a2 :: []) -> EF_inline_asm (parse_string a0, parse_signature a1, parse_list parse_string a2)
+  | `List ((`String "EF_debug") :: a0 :: a1 :: a2 :: []) -> EF_debug (parse_positive a0, parse_ident_str a1, parse_list parse_typ a2)
+  | _ -> fail_parse "external_function" j
+
+let parse_AST_fundef (parse_f : json -> 'f) (j : json) : 'f AST.fundef =
+  match j with
+  | `List ((`String "Internal") :: a0 :: []) -> Internal (parse_f a0)
+  | `List ((`String "External") :: a0 :: []) -> External (parse_external_function a0)
+  | _ -> fail_parse "AST.fundef" j
+
+let parse_constant (j : json) : constant =
+  match j with
+  | `List ((`String "Ointconst") :: a0 :: []) -> Ointconst (parse_Int_int a0)
+  | `List ((`String "Ofloatconst") :: a0 :: []) -> Ofloatconst (parse_float a0)
+  | `List ((`String "Osingleconst") :: a0 :: []) -> Osingleconst (parse_float32 a0)
+  | `List ((`String "Olongconst") :: a0 :: []) -> Olongconst (parse_Int64_int a0)
+  | `List ((`String "Oaddrsymbol") :: a0 :: a1 :: []) -> Oaddrsymbol (parse_ident_str a0, parse_Ptrofs_int a1)
+  | `List ((`String "Oaddrstack") :: a0 :: []) -> Oaddrstack (parse_Ptrofs_int a0)
+  | _ -> fail_parse "constant" j
+
+let parse_unary_operation (j : json) : unary_operation =
+  match j with
+  | `String "Ocast8unsigned" -> Ocast8unsigned
+  | `String "Ocast8signed" -> Ocast8signed
+  | `String "Ocast16unsigned" -> Ocast16unsigned
+  | `String "Ocast16signed" -> Ocast16signed
+  | `String "Onegint" -> Onegint
+  | `String "Onotint" -> Onotint
+  | `String "Onegf" -> Onegf
+  | `String "Oabsf" -> Oabsf
+  | `String "Onegfs" -> Onegfs
+  | `String "Oabsfs" -> Oabsfs
+  | `String "Osingleoffloat" -> Osingleoffloat
+  | `String "Ofloatofsingle" -> Ofloatofsingle
+  | `String "Ointoffloat" -> Ointoffloat
+  | `String "Ointuoffloat" -> Ointuoffloat
+  | `String "Ofloatofint" -> Ofloatofint
+  | `String "Ofloatofintu" -> Ofloatofintu
+  | `String "Ointofsingle" -> Ointofsingle
+  | `String "Ointuofsingle" -> Ointuofsingle
+  | `String "Osingleofint" -> Osingleofint
+  | `String "Osingleofintu" -> Osingleofintu
+  | `String "Onegl" -> Onegl
+  | `String "Onotl" -> Onotl
+  | `String "Ointoflong" -> Ointoflong
+  | `String "Olongofint" -> Olongofint
+  | `String "Olongofintu" -> Olongofintu
+  | `String "Olongoffloat" -> Olongoffloat
+  | `String "Olonguoffloat" -> Olonguoffloat
+  | `String "Ofloatoflong" -> Ofloatoflong
+  | `String "Ofloatoflongu" -> Ofloatoflongu
+  | `String "Olongofsingle" -> Olongofsingle
+  | `String "Olonguofsingle" -> Olonguofsingle
+  | `String "Osingleoflong" -> Osingleoflong
+  | `String "Osingleoflongu" -> Osingleoflongu
+  | _ -> fail_parse "unary_operation" j
+
+let parse_binary_operation (j : json) : binary_operation =
+  match j with
+  | `List ((`String "Oadd") :: []) -> Oadd
+  | `List ((`String "Osub") :: []) -> Osub
+  | `List ((`String "Omul") :: []) -> Omul
+  | `List ((`String "Odiv") :: []) -> Odiv
+  | `List ((`String "Odivu") :: []) -> Odivu
+  | `List ((`String "Omod") :: []) -> Omod
+  | `List ((`String "Omodu") :: []) -> Omodu
+  | `List ((`String "Oand") :: []) -> Oand
+  | `List ((`String "Oor") :: []) -> Oor
+  | `List ((`String "Oxor") :: []) -> Oxor
+  | `List ((`String "Oshl") :: []) -> Oshl
+  | `List ((`String "Oshr") :: []) -> Oshr
+  | `List ((`String "Oshru") :: []) -> Oshru
+  | `List ((`String "Oaddf") :: []) -> Oaddf
+  | `List ((`String "Osubf") :: []) -> Osubf
+  | `List ((`String "Omulf") :: []) -> Omulf
+  | `List ((`String "Odivf") :: []) -> Odivf
+  | `List ((`String "Oaddfs") :: []) -> Oaddfs
+  | `List ((`String "Osubfs") :: []) -> Osubfs
+  | `List ((`String "Omulfs") :: []) -> Omulfs
+  | `List ((`String "Odivfs") :: []) -> Odivfs
+  | `List ((`String "Oaddl") :: []) -> Oaddl
+  | `List ((`String "Osubl") :: []) -> Osubl
+  | `List ((`String "Omull") :: []) -> Omull
+  | `List ((`String "Odivl") :: []) -> Odivl
+  | `List ((`String "Odivlu") :: []) -> Odivlu
+  | `List ((`String "Omodl") :: []) -> Omodl
+  | `List ((`String "Omodlu") :: []) -> Omodlu
+  | `List ((`String "Oandl") :: []) -> Oandl
+  | `List ((`String "Oorl") :: []) -> Oorl
+  | `List ((`String "Oxorl") :: []) -> Oxorl
+  | `List ((`String "Oshll") :: []) -> Oshll
+  | `List ((`String "Oshrl") :: []) -> Oshrl
+  | `List ((`String "Oshrlu") :: []) -> Oshrlu
+  | `List ((`String "Ocmp") :: a0 :: []) -> Ocmp (parse_comparison a0)
+  | `List ((`String "Ocmpu") :: a0 :: []) -> Ocmpu (parse_comparison a0)
+  | `List ((`String "Ocmpf") :: a0 :: []) -> Ocmpf (parse_comparison a0)
+  | `List ((`String "Ocmpfs") :: a0 :: []) -> Ocmpfs (parse_comparison a0)
+  | `List ((`String "Ocmpl") :: a0 :: []) -> Ocmpl (parse_comparison a0)
+  | `List ((`String "Ocmplu") :: a0 :: []) -> Ocmplu (parse_comparison a0)
+  | _ -> fail_parse "binary_operation" j
+
+let rec parse_expr (j : json) : expr =
+  match j with
+  | `List ((`String "Evar") :: a0 :: []) -> Evar (parse_ident_str a0)
+  | `List ((`String "Econst") :: a0 :: []) -> Econst (parse_constant a0)
+  | `List ((`String "Eunop") :: a0 :: a1 :: []) -> Eunop (parse_unary_operation a0, parse_expr a1)
+  | `List ((`String "Ebinop") :: a0 :: a1 :: a2 :: []) -> Ebinop (parse_binary_operation a0, parse_expr a1, parse_expr a2)
+  | `List ((`String "Eload") :: a0 :: a1 :: []) -> Eload (parse_memory_chunk a0, parse_expr a1)
+  | _ -> fail_parse "expr" j
+
+let parse_label = parse_ident_str
+
+let rec parse_stmt (j : json) : stmt =
+  match j with
+  | `List ((`String "Sskip") :: []) -> Sskip
+  | `List ((`String "Sassign") :: a0 :: a1 :: []) -> Sassign (parse_ident_str a0, parse_expr a1)
+  | `List ((`String "Sstore") :: a0 :: a1 :: a2 :: []) -> Sstore (parse_memory_chunk a0, parse_expr a1, parse_expr a2)
+  | `List ((`String "Scall") :: a0 :: a1 :: a2 :: a3 :: []) -> Scall (parse_option parse_ident_str a0, parse_signature a1, parse_expr a2, parse_list parse_expr a3)
+  | `List ((`String "Stailcall") :: a0 :: a1 :: a2 :: []) -> Stailcall (parse_signature a0, parse_expr a1, parse_list parse_expr a2)
+  | `List ((`String "Sbuiltin") :: a0 :: a1 :: a2 :: []) -> Sbuiltin (parse_option parse_ident_str a0, parse_external_function a1, parse_list parse_expr a2)
+  | `List ((`String "Sseq") :: a0 :: a1 :: []) -> Sseq (parse_stmt a0, parse_stmt a1)
+  | `List ((`String "Sifthenelse") :: a0 :: a1 :: a2 :: []) -> Sifthenelse (parse_expr a0, parse_stmt a1, parse_stmt a2)
+  | `List ((`String "Sloop") :: a0 :: []) -> Sloop (parse_stmt a0)
+  | `List ((`String "Sblock") :: a0 :: []) -> Sblock (parse_stmt a0)
+  | `List ((`String "Sexit") :: a0 :: []) -> Sexit (parse_nat a0)
+  | `List ((`String "Sswitch") :: a0 :: a1 :: a2 :: a3 :: []) -> Sswitch (parse_bool a0, parse_expr a1, parse_list (parse_tuple2 parse_coq_Z parse_nat) a2, parse_nat a3)
+  | `List ((`String "Sreturn") :: a0 :: []) -> Sreturn (parse_option parse_expr a0)
+  | `List ((`String "Slabel") :: a0 :: a1 :: []) -> Slabel (parse_label a0, parse_stmt a1)
+  | `List ((`String "Sgoto") :: a0 :: []) -> Sgoto (parse_label a0)
+  | _ -> fail_parse "stmt" j
+
+let parse_coq_function (j : json) : coq_function =
+  {fn_sig = parse_assoc_key "fn_sig" parse_signature j;
+   fn_params = parse_assoc_key "fn_params" (parse_list parse_ident_str) j;
+   fn_vars = parse_assoc_key "fn_vars" (parse_list parse_ident_str) j;
+   fn_stackspace = parse_assoc_key "fn_stackspace" parse_coq_Z j;
+   fn_body = parse_assoc_key "fn_body" parse_stmt j}
+
+let parse_fundef = parse_AST_fundef parse_coq_function
+
+let parse_program = parse_AST_program parse_fundef parse_unit
